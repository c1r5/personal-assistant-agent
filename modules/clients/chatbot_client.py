from typing import Any, Awaitable, Callable, Union
from modules.api.models import BotMessage, UserMessage
from modules.clients.mcp_client import MCPClient

ResponseListener = Callable[[BotMessage], Union[Awaitable[Any], Any]]

class ChatBotClient:
    __on_response_listeners: list[ResponseListener] = []
    
    def __init__(self, llm: MCPClient):
        self.llm = llm
        
    def add_on_response_listener(self, listener: ResponseListener):
        """
        Add a listener that will be called when a response is generated.
        
        Args:
            listener (ResponseListener): A callable that takes a BotMessage response.
        """
        self.__on_response_listeners.append(listener)
        
    async def on_message(self, user_message: UserMessage):
        """
        Process the input message and return a response.
        
        Args:
            message (UserMessage): The input message to process.

        Returns:
            str: The response generated by the assistant.
        """
        response  = await self.llm.generate_llm_response(user_message.message)
        
        try:
            response_message = BotMessage(message=response if response is not None else "Error: No response", reply_to_message_id=user_message.message_id)
        except ValueError as e:
            print(f"Error creating BotMessage: {e}")
            return
        
        for listener in self.__on_response_listeners:
            await listener(response_message)